{"version":3,"sources":["components/Movie.js","components/Book.js","components/QuoteContainer.js","Quote.js","serviceWorker.js","index.js"],"names":["ListItem","styled","li","Movie","props","movie","director","Book","book","author","Quote","h3","Name","p","OptionalContainer","div","ListContainer","ul","QuoteContainer","quote","name","totalQuotes","arrayOfBackgroundColors","state","this","getRandomQuoteObject","hasOwnProperty","setState","array","arrayData","Math","floor","random","length","quotes","interval","setInterval","getData","clearInterval","Background","getRandomBackgroundColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62109ce8.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ListItem = styled.li`\n    float: center;\n    display: inline-block;\n    padding-right: 1.5rem;\n`\n\nfunction Movie(props) {\n    return (\n        <>\n            <ListItem><strong>Movie:</strong> {props.movie}</ListItem>\n            <ListItem><strong>Director:</strong> {props.director}</ListItem>\n        </>\n    );\n}\n\nexport default Movie;","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ListItem = styled.li`\n    float: center;\n    display: inline-block;\n    padding-right: 1.5rem;\n`\n\nfunction Book(props) {\n    return (\n        <>\n            <ListItem><strong>Book:</strong> {props.book}</ListItem>\n            <ListItem><strong>Author:</strong> {props.author}</ListItem>\n        </>\n    );\n}\n\nexport default Book;\n","import React from 'react';\nimport styled from \"styled-components\";\nimport Movie from \"./Movie\";\nimport Book from \"./Book\";\n\n// quote style\nconst Quote = styled.h3`\n    margin: auto;\n    padding: 10.5rem 10rem 1rem 10rem;\n    text-align: center;\n    font-size: 2.5rem;\n    font-family: 'Ubuntu', sans-serif;\n    font-weight: regular;\n    color: rgba(0,0,0,0.75);\n    line-height: 3.5rem;\n`;\n// name style\nconst Name = styled.p`\n    margin: auto;\n    padding: 1rem 10rem 1rem 10rem;\n    text-align: center;\n    font-size: 1.75rem;\n    font-family: 'Ubuntu', sans-serif;\n    font-weight: light;\n    color: rgba(0,0,0,0.75);\n`\n// optional object properties styles\nconst OptionalContainer = styled.div`\n    margin: auto;\n    padding-top: 1rem;\n    text-align: center;\n    font-size: 1.25rem;\n    font-family: 'Ubuntu', sans-serif;\n    font-weight: light;\n    color: rgba(0,0,0,0.75);\n`\n// list container styles\nconst ListContainer = styled.ul`\n    list-style-type: none;\n    margin: auto;\n    text-align: center;\n`\n\nfunction QuoteContainer(props) {\n    return(\n        <>\n            <Quote>{props.quote}</Quote>\n            <Name>- {props.name} -</Name>\n            <OptionalContainer>\n                <ListContainer>\n                    <>\n                        {\n                            (props.movie === \"\") ?\n                                <>\n                                </>\n                            :\n                                <Movie\n                                    movie={props.movie}\n                                    director={props.director}\n                                />\n                        }\n                    </>\n                    <>\n                        {\n                            (props.book === \"\") ?\n                                <>\n                                </>\n                            :\n                                <Book\n                                    book={props.book}\n                                    author={props.author}\n                                />\n                        }\n                    </>\n                </ListContainer>\n            </OptionalContainer>\n        </>\n    );\n}\n\nexport default QuoteContainer;","import React, { Component } from 'react';\nimport styled from \"styled-components\";\n// components\nimport QuoteContainer from \"./components/QuoteContainer\";\n// JSON files\nimport people from './quotes/people.json';\nimport literaryWorks from './quotes/literaryWorks.json';\nimport films from './quotes/films.json';\n// global variables\nconst totalQuotes = [ people, literaryWorks, films ];\nconst arrayOfBackgroundColors = [ \"#ff7f50\", \"#7fffd4\", \"#5f9ea0\", \"#ffe4b5\",\n    \"#deb887\", \"#dcdcdc\", \"#f0fff0\", \"#90ee90\" ];\n\n/**\n * Quote class build quote objects and adds them to the screen\n */\nclass Quote extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"John Adams\",\n            quote: \"There are few people in this world with whom I can converse.\",\n            book: \"\",\n            author: \"\",\n            movie: \"\",\n            director: \"\"\n        }\n    }\n\n    /**\n     * Generates a random quote object from the getRandomQuotes method,\n     * will set the used property to false if it is not already, or it will\n     * set to true if false.\n     * Checks to see if the object has optional parameters and sets them if necessary,\n     * while ensuring to set the mandatory state parameters.\n     */\n    getData() {\n        const quote = this.getRandomQuoteObject(totalQuotes); // JSON Object containing theme\n\n        if ((quote.hasOwnProperty(\"author\") === false) &&\n            (quote.hasOwnProperty(\"movie\") === false)) { // set the mandatory state\n            this.setState({\n                name: quote.name,\n                quote: quote.quote,\n                author: \"\",\n                book: \"\",\n                movie: \"\",\n                director: \"\"\n            });\n        } else if (quote.hasOwnProperty(\"author\") &&\n                    quote.hasOwnProperty(\"book\") &&\n                    quote.hasOwnProperty(\"quote\")) { // set the state for the book\n            this.setState({\n                name: quote.name,\n                quote: quote.quote,\n                author: quote.author,\n                book: quote.book,\n                movie: \"\",\n                director: \"\",\n            });\n        } else if (quote.hasOwnProperty(\"movie\") &&\n                    quote.hasOwnProperty(\"director\") &&\n                    quote.hasOwnProperty(\"quote\")) { // set the movies state\n            this.setState({\n                name: quote.name,\n                quote: quote.quote,\n                movie: quote.movie,\n                director: quote.director,\n                author: \"\",\n                book: \"\",\n\n            });\n        }\n    }\n\n    /**\n     * Retrieves a random theme quote object from the JSON files\n     * @param array Array of JSON objects containing quote data\n     * @returns {Object} single JSON object to use in getData method\n     */\n    getRandomQuoteObject(array) {\n        const theme = Math.floor(Math.random() * array.length); // pick from 0 - total themes\n        const arrayData = array[theme].quotes; // pull into an array of the quotes\n        const randomQuoteObject = Math.floor(Math.random() * arrayData.length); // pick from 0 - total quotes\n        const quoteObject = arrayData[randomQuoteObject]; // get random quote object\n\n        return quoteObject;\n    }\n\n    /**\n     * Retrieves a random color from the array\n     * of background colors to choose from\n     * @returns {string} Background color\n     */\n    getRandomBackgroundColor(array) {\n        const randomNumber = Math.floor(Math.random() * array.length);\n        const randomColor = array[randomNumber];\n        return randomColor;\n    }\n\n    /**\n     * Call the class and mount the component ever 10 seconds\n     */\n    componentDidMount() {\n        this.interval = setInterval(() => this.getData(), 18000);\n    }\n\n    /**\n     * Unmount and mount the component, clearing the interval in between\n     */\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    /**\n     * Render the components to the dom\n     * @returns Render\n     */\n    render() {\n        const Background = styled.div`\n            background-color: ${this.getRandomBackgroundColor(arrayOfBackgroundColors)};\n            min-height: 100vh;\n            margin: auto;\n            \n        `\n        return (\n            <Background>\n                <QuoteContainer\n                    name={this.state.name}\n                    quote={this.state.quote}\n                    book={this.state.book}\n                    author={this.state.author}\n                    movie={this.state.movie}\n                    director={this.state.director}\n                />\n            </Background>\n        );\n    }\n}\n\nexport default Quote;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Quote from './Quote';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Quote />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}